<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Import after Microsoft.CSharp.Targets -->
  
  <UsingTask TaskName="SlowMonkey.Tasks.TransformXml" AssemblyFile="$(MSBuildThisFileDirectory)SlowMonkey.Tasks.dll" />

  <Target Name="_SlowMonkeySetTransformFile" BeforeTargets="_CopyAppConfigFile">
    <!-- If ConfigTransformFile specified, error if it does not exist. -->
    <Error Condition="$(ConfigTransformFile) != '' and !Exists('$(ConfigTransformFile)')"
           Text="ConfigTransformFile does not exist: $(ConfigTransformFile)" />
    
    <CreateProperty Condition="'$(ConfigTransformFile)' == ''" Value="@(AppConfigWithTargetPath->'%(Filename).$(Configuration)%(Extension)')">
      <Output TaskParameter="Value" PropertyName="ConfigTransformFile" />
    </CreateProperty>
    
    <!-- Make it an item so we can get the file name instead of using $(ConfigTransformFile)
         in the name of the transformed file, because that might contain directory separators -->
    <CreateItem Condition="'$(ConfigTransformFile)' != ''" Include="$(ConfigTransformFile)">
      <Output TaskParameter="Include" ItemName="ConfigTransformFileItem" />
    </CreateItem>
    
    <CreateProperty Condition="'$(ConfigTransformFile)' != ''" Value="@(ConfigTransformFileItem->'%(Filename)%(Extension)')">
      <Output TaskParameter="Value" PropertyName="ConfigTransformFilename" />
    </CreateProperty>
  
    <CreateProperty Condition="'$(ConfigTransformFile)' != ''" Value="$(IntermediateOutputPath)$(MSBuildProjectFile).$(ConfigTransformFilename).transformed">
      <Output TaskParameter="Value" PropertyName="ConfigTransformOutput" />
    </CreateProperty>
  </Target>

  <Target Name="_TransformAppConfig"
          AfterTargets="_SlowMonkeySetTransformFile"
          Condition="'@(AppConfigWithTargetPath)' != '' and Exists('$(ConfigTransformFile)')"
          Inputs="@(AppConfigWithTargetPath);$(ConfigTransformFile)"
          Outputs="$(ConfigTransformOutput)"
  >
    <!-- Transform -->
    <SlowMonkey.Tasks.TransformXml
      Source="@(AppConfigWithTargetPath)"
      Destination="$(ConfigTransformOutput)"
      Transform="$(ConfigTransformFile)" />
  </Target>

  <Target Name="_TouchTransformedConfig"
          AfterTargets="_TransformAppConfig"
          Condition="'@(AppConfigWithTargetPath)' != '' and Exists('$(ConfigTransformFile)')"
  >
    <!-- Set the modified timestamp of the transformed config to now, so that _CopyAppConfigFile actually copies the file.
         Otherwise what can happen is you build in configuration A, then in Configuration B, then in Configuration A again.
         _CopyAppConfigFile will see that the timestamp of the Configuration A transformed config is older than the app.config
         in the bin folder and so won't copy it to bin.
         
         This lets us skip running the transform if possible while still forcing the transformed config to always be copied to bin.
         -->
    <Touch AlwaysCreate="false" Files="$(ConfigTransformOutput)" />
  </Target>
  
  <Target Name="_SetAppConfigToTransformed"
          AfterTargets="_TouchTransformedConfig"
          Condition="'@(AppConfigWithTargetPath)' != '' and Exists('$(ConfigTransformFile)')">
    <!-- Set transformed to $(AppConfig) and @(AppConfigWithTargetPath) -->
    
    <!-- Use CreateProperty instead of a PropertyGroup because mono 2.10.8.1 does not support PropertyGroups inside targets. -->
    <CreateProperty Value="$(ConfigTransformOutput)">
      <Output TaskParameter="Value" PropertyName="AppConfig" />
    </CreateProperty>
    
    <!-- Use CreateProperty instead of putting it in the propertygroup above because dynamic
    properties seem to be lazily evaluated in xbuild instead of evaluated once at the time of their definition.
    That results in the property value being empty later on after the original AppConfigWithTargetPath is removed.
    
    See mono bug https://bugzilla.xamarin.com/show_bug.cgi?id=24366
    
    Using CreateProperty does not suffe from this problem.
    
    -->
    <CreateProperty Value="@(AppConfigWithTargetPath->'%(TargetPath)')">
      <Output TaskParameter="Value" PropertyName="OldAppConfigTargetPath" />
    </CreateProperty>
    
    <ItemGroup>
      <AppConfigWithTargetPath Remove="@(AppConfigWithTargetPath)" />
    </ItemGroup>
    
    <!-- Use CreateItem instead of simply putting an include in the ItemGroup because
    
      <AppConfigWithTargetPath Include="$(AppConfig)">
        <TargetPath>$(OldAppConfigTargetPath)</TargetPath>
      </AppConfigWithTargetPath>
      
      results in literally "$(OldAppConfigTargetPath)" being the value of the TargetPath metadata.
      
      See mono bug https://bugzilla.xamarin.com/show_bug.cgi?id=24211
      
    -->
    <CreateItem Include="$(AppConfig)" AdditionalMetadata="TargetPath=$(OldAppConfigTargetPath)">
      <Output TaskParameter="Include" ItemName="AppConfigWithTargetPath" />
    </CreateItem>
  </Target>
  
  <Target Name="SlowMonkeyClean">
    <CreateItem Include="$(IntermediateOutputPath)*.transformed">
      <Output TaskParameter="Include" ItemName="SlowMonkeyFilesToClean" />
    </CreateItem>
    
    <Delete Files="@(SlowMonkeyFilesToClean)" />
  </Target>
  
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      SlowMonkeyClean
    </CleanDependsOn>
  </PropertyGroup>
</Project>